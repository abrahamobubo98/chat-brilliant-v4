/**
 * This is a placeholder for the generated Convex API.
 * The actual file would be generated by Convex based on the schema and functions.
 */

// Define more specific types to replace 'any'
type ArgsType = Record<string, unknown>;
type ReturnType = unknown;

// Define types for Convex function references to match what Convex's FunctionReference expects
interface ConvexFunctionReference<T extends "query" | "mutation" | "action"> {
  _type: T;
  _internalName: string;
  _visibility: "public"; // Must be specifically "public" for compatibility
  _args: ArgsType; // Use a more specific type than 'any'
  _returnType: ReturnType; // Use a more specific type than 'any'
  _componentPath: string; // Required by FunctionReference
  [key: string]: unknown; // Use 'unknown' instead of 'any' for index signature
}

// Mock the Convex function reference structure
// In a real application, these would be generated by Convex
export const api = {
  messages: {
    send: { 
      // These properties mirror what Convex generates
      _type: "mutation",
      _internalName: "messages:send",
      _visibility: "public",
      _args: {},
      _returnType: {},
      _componentPath: "messages/send.ts",
    } as ConvexFunctionReference<"mutation">,
  },
  avatarUsage: {
    track: { 
      _type: "mutation",
      _internalName: "avatarUsage:track",
      _visibility: "public",
      _args: {},
      _returnType: {},
      _componentPath: "avatarUsage/track.ts",
    } as ConvexFunctionReference<"mutation">,
  },
  conversations: {
    list: {
      _type: "query",
      _internalName: "conversations:list",
      _visibility: "public",
      _args: {},
      _returnType: {},
      _componentPath: "conversations/list.ts",
    } as ConvexFunctionReference<"query">,
  },
  members: {
    current: {
      _type: "query",
      _internalName: "members:current",
      _visibility: "public",
      _args: {},
      _returnType: {},
      _componentPath: "members/current.ts",
    } as ConvexFunctionReference<"query">,
  },
}; 